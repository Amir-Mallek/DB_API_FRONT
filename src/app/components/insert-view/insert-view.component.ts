import {Component, Input} from '@angular/core';
import {TableDescriptionService} from "../../services/table-description.service";
import {Column} from "../../model/column";
import {InputTypePipe} from "../../pipes/input-type-pipe";
import {DbManagerService} from "../../services/db-manager.service";
import {FormControl, FormGroup, ReactiveFormsModule, Validators} from "@angular/forms";
import {QueryResultComponent} from "../query-result/query-result.component";
import {RouterLink} from "@angular/router";

@Component({
  selector: 'app-insert-view',
  standalone: true,
  imports: [
    InputTypePipe,
    ReactiveFormsModule,
    QueryResultComponent,
    RouterLink
  ],
  templateUrl: './insert-view.component.html',
  styleUrl: './insert-view.component.css'
})
export class InsertViewComponent {
  @Input() schema = '';
  @Input() table = '';
  columns: Column[] = [];
  insertForm: FormGroup = new FormGroup({});

  queryStatus: boolean = false;
  queryMessage: string = '';

  constructor(
    private tableDescription: TableDescriptionService,
    private manager: DbManagerService
  ) {
    this.tableDescription.columns.subscribe(
      (response) => {
        this.columns = response;
        let groupControls: Record<string, FormControl> = {};
        for (let column of this.columns) {
          groupControls[column.name] = new FormControl(
            '',
            (!column.nullable && !column.isAutoGenerated) ?
              Validators.required : Validators.nullValidator
          );
        }
        this.insertForm = new FormGroup(groupControls);
      }
    );
  }

  onSubmit() {
    this.manager.insertValues(
      this.schema,
      this.table,
      this.columns,
      this.insertForm.value
    ).subscribe(
      {
        next: (r) => {
          this.queryStatus = true;
          this.queryMessage = r.message + ". " + r.affectedRows + ' row(s) affected.';
          this.insertForm.reset();
        },
        error: (e) => {
          this.queryStatus = false;
          this.queryMessage = e.message;
        },
        complete: () => 1
      }
    );
  }
}
